using UdonSharp;
using UnityEngine;
using VRC.SDKBase;
using VRC.Udon;
using VRC.SDK3.Components;

namespace JanSharp
{
    [UdonBehaviourSyncMode(BehaviourSyncMode.Manual)]
    public class ItemScaleManager : UdonSharpBehaviour
    {
        public GameObject[] parentsForObjectPools;
        [Header("Internal")]
        [Tooltip("Generated by Find all Items button")]
        public GameObject[] items;
        [Tooltip("Generated by Find all Items button")]
        public Vector3[] initialScales;

        private float[] scales;
        private ushort[] itemIds;
        private int itemsCount;
        [UdonSynced] private float[] syncedScales;
        [UdonSynced] private ushort[] syncedItemIds;
        private int requestedSerializationCount;
        private bool waitingForOwnerToSendData;

        private void Start()
        {
            scales = new float[16];
            itemIds = new ushort[16];
            itemsCount = 0;
        }

        public int GetIdForItem(GameObject obj)
        {
            for (int i = 0; i < items.Length; i++)
                if (items[i] == obj)
                {
                    // Debug.Log($"<dlt> id for item {obj.name} is {i}");
                    return i;
                }
            return -1;
        }

        public void SetScale(int id, Vector3 currentLocalScale)
        {
            if (id == -1)
                return;
            float scale = currentLocalScale.x / initialScales[id].x;
            // Debug.Log($"<dlt> scale: {scale} currentLocalScale.x: {currentLocalScale.x} initialScales[id].x: {initialScales[id].x}");
            ushort shortId = (ushort)id;
            for (int i = 0; i < itemsCount; i++)
            {
                if (itemIds[i] == shortId)
                {
                    scales[i] = scale;
                    return;
                }
            }
            if (itemsCount == itemIds.Length)
            {
                var newItemIds = new ushort[itemsCount * 2];
                itemIds.CopyTo(newItemIds, 0);
                itemIds = newItemIds;
                var newScales = new float[itemsCount * 2];
                scales.CopyTo(newScales, 0);
                scales = newScales;
            }
            itemIds[itemsCount] = shortId;
            scales[itemsCount] = scale;
            itemsCount++;
        }

        public override void OnPlayerJoined(VRCPlayerApi player)
        {
            if (Networking.LocalPlayer.IsOwner(this.gameObject) && VRCPlayerApi.GetPlayerCount() != 1)
            {
                SendCustomEventDelayedSeconds(nameof(RequestSerializationDelayed), 8f);
                requestedSerializationCount++;
            }
            else
            {
                waitingForOwnerToSendData = true;
            }
        }

        public override void OnOwnershipTransferred(VRCPlayerApi player)
        {
            if (waitingForOwnerToSendData && Networking.LocalPlayer.IsOwner(this.gameObject))
            {
                SendCustomEventDelayedSeconds(nameof(RequestSerializationDelayed), 8f);
                requestedSerializationCount++;
            }
        }

        public void RequestSerializationDelayed()
        {
            if ((--requestedSerializationCount) == 0)
                RequestSerialization();
        }

        public override void OnPreSerialization()
        {
            if (syncedItemIds == null || syncedItemIds.Length != itemsCount)
            {
                syncedItemIds = new ushort[itemsCount];
                syncedScales = new float[itemsCount];
            }
            for (int i = 0; i < itemsCount; i++)
            {
                syncedItemIds[i] = itemIds[i];
                syncedScales[i] = scales[i];
            }
        }

        public override void OnDeserialization()
        {
            waitingForOwnerToSendData = false;
            if (syncedItemIds == null) // just in case
                return;
            int count = 16;
            while (count < syncedItemIds.Length)
                count *= 2;
            itemIds = new ushort[count];
            scales = new float[count];
            syncedItemIds.CopyTo(itemIds, 0);
            syncedScales.CopyTo(scales, 0);
            itemsCount = syncedItemIds.Length;
            for (int i = 0; i < syncedItemIds.Length; i++)
            {
                ushort id = syncedItemIds[i];
                items[id].transform.localScale = initialScales[id] * syncedScales[i];
                // Debug.Log($"<dlt> initialScales[id]: {initialScales[id]} syncedScales[i]: {syncedScales[i]}");
            }
        }
    }
}
